NPB3.4-MZ (Multi-Zone) OpenMP Versions
----------------------------------------

For details, see
   http://www.nas.nasa.gov/Research/Reports/Techreports/2003/
   nas-03-010-abstract.html

NPB Development Team
   npb@nas.nasa.gov


Compilation
------------

1. copy one of the 'make.def' examples in config/NAS.samples or the
   file config/make.def.template to config/make.def

2. modify/specify the compiler and compilation flags in config/make.def

3. use the following line to compile
   make benchmark CLASS=class

   [benchmark] is one of [bt-mz, sp-mz, lu-mz]
   [class] is one of [S, W, A through F]


Execution
----------

The executable is named <benchmark-name>.<class>.x and is placed
in the bin directory (or in the directory BINDIR specified in
the make.def).  In order to run the program, you should first
specify the number of threads and define any needed runtime 
parameters (see below for details).

Here is an example of running bt-mz, class A with 4 outer 
threads and 2 inner threads per outer thread (in csh):

   setenv OMP_NUM_THREADS 4,2
   bin/bt-mz.A.x


Runtime Environment Variables and Setups
-----------------------------------------

1. Specify the number of threads

There are two ways to specify the number of threads:
   - using a load data file for different benchmark
      loadbt-mz.data, loadsp-mz.data, or loadlu-mz.data
   - using environment variables.

1.1 load data file

Before a load data file can be used, one needs first specify
the number of outer-level threads (number_of_othreads) by using
the environment variable OMP_NUM_THREADS (see next section).

A load data file defines the number of threads used for each outer-
level thread and has the following format:
   <thread#>  <number_inner_threads>  <flag>
   <thread#>  <number_inner_threads>  <flag>
   ...

<thread#> is the outer-level thread number, starting from 0, up to
<number_of_othreads>-1.  <number_inner_threads> defines the number
of threads used for each outer thread.  <flag> can be used to control 
load balancing with threads at the inner-level parallel regions.
The file will be read from the current working directory.

The load data file precedes the environment variables as described in
Section 1.2, in particular, the load balancing with threads movement
will not be applied if all values of <flag> are less than one.

1.2 environment variables

OMP_NUM_THREADS <n1,n2>
  - <n1> is the number of outer-level threads; <n2> is the number of 
    inner threads per outer-level thread. If <n2> is not specified, 
    one inner thread is assumed for each outer thread. If this variable
    is not specified, one thread is assumed for the whole program.

    The total number of threads is
       number_of_othreads * number_inner_threads.

NPB_OMP_NESTED
  - control the level of nested OpenMP parallelism in the code.
    With a value of "1", only the outer-level OpenMP parallelization
    (among zones) is enabled.  Inner level has no effect.
    With a value of "2", only the inner-level OpenMP parallelization
    (with each zone) is enabled.  Outer level has no effect.
    With other value, both levels are enabled (as the default).

NPB_MZ_BLOAD
  - flag for load balancing with threads.  By default, load balancing
    with threads is on (with a value of 1, ON or TRUE).

2. Other environment variables

NPB_VERBOSE
  - flag to control verbose output.  By default (a value of 0), a summary
    is printed.  With a value of 1 (or larger), more detailed information 
    on zones is printed.

NPB_TIMER_FLAG
  - flag to enable additional profile timers (see below)

3. Use the built-in profile timers

An input parameter file may be used to change several parameters at 
runtime, one of which is the timer flag that controls the collection of 
some timing statistics.  In order to use this feature, one needs to create 
an "input<benchmark>.data" file (<benchmark>=bt-mz, sp-mz or lu-mz) in 
the working directory from the sample input files included in the source 
directory.  To collect timing statistics, switch on (with a value of 1)
the timer flag in the input file.

An alternative way is to define the environment variable NPB_TIMER_FLAG
with a value of 1.  The old method of creating a "timer.flag" file in 
the working directory is still supported, but not recommended.


Known Problems
---------------
  - Compilation of the codes requires a compiler that supports Fortran 90
    and OpenMP 3.0, or higher.

  - With some versions of Intel compilers, the following runtime variable
    may be required to avoid a stacksize overflow:

    "setenv KMP_MONITOR_STACKSIZE 200k" (csh) or
    "export KMP_MONITOR_STACKSIZE=200k" (sh)

  - The LU-MZ benchmark may require larger stack size for OpenMP threads
    than the default setup.  For a compiler that supports OpenMP 3.0, use

      setenv OMP_STACKSIZE 30m  (csh)
      export OMP_STACKSIZE=30m  (sh)

    The value will be different for different class of problems.
    You may need to try a few times.

